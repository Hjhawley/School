
Please enter an expression:
tokens: [Number(1.0)]
ast: Num(
    1.0,
)
1

Please enter an expression:
tokens: [Number(0.0)]
ast: Num(
    0.0,
)
0

Please enter an expression:
tokens: [Number(-4.0)]
ast: Num(
    -4.0,
)
-4

Please enter an expression:
tokens: [Bool(true)]
ast: Bool(
    true,
)
true

Please enter an expression:
tokens: [Bool(false)]
ast: Bool(
    false,
)
false

Please enter an expression:
tokens: [Number(67.0), Plus, Number(32.0)]
ast: Plus {
    left: Num(
        67.0,
    ),
    right: Num(
        32.0,
    ),
}
99

Please enter an expression:
tokens: [Number(3.0), Plus, Number(4.0), Plus, Number(9.0), Plus, Number(12.0)]
ast: Plus {
    left: Plus {
        left: Plus {
            left: Num(
                3.0,
            ),
            right: Num(
                4.0,
            ),
        },
        right: Num(
            9.0,
        ),
    },
    right: Num(
        12.0,
    ),
}
28

Please enter an expression:
tokens: [Number(1.0), Plus, Number(-2.0), Plus, Number(3.0), Plus, Number(-4.0), Plus, Number(5.0)]
ast: Plus {
    left: Plus {
        left: Plus {
            left: Plus {
                left: Num(
                    1.0,
                ),
                right: Num(
                    -2.0,
                ),
            },
            right: Num(
                3.0,
            ),
        },
        right: Num(
            -4.0,
        ),
    },
    right: Num(
        5.0,
    ),
}
3

Please enter an expression:
tokens: [If, Bool(true), LeftBrace, Number(1.0), Plus, LeftParen, Number(2.0), Plus, Number(3.0), RightParen, RightBrace, Else, LeftBrace, Number(1.0), Plus, Number(2.0), Plus, Number(3.0), RightBrace]
ast: Cnd {
    tst: Bool(
        true,
    ),
    thn: Plus {
        left: Num(
            1.0,
        ),
        right: Plus {
            left: Num(
                2.0,
            ),
            right: Num(
                3.0,
            ),
        },
    },
    els: Plus {
        left: Plus {
            left: Num(
                1.0,
            ),
            right: Num(
                2.0,
            ),
        },
        right: Num(
            3.0,
        ),
    },
}
6

Please enter an expression:
tokens: [If, Bool(false), LeftBrace, Number(1.0), Plus, LeftParen, Number(2.0), Plus, Number(3.0), RightParen, RightBrace, Else, LeftBrace, Bool(false), RightBrace]
ast: Cnd {
    tst: Bool(
        false,
    ),
    thn: Plus {
        left: Num(
            1.0,
        ),
        right: Plus {
            left: Num(
                2.0,
            ),
            right: Num(
                3.0,
            ),
        },
    },
    els: Bool(
        false,
    ),
}
false

Please enter an expression:
tokens: [Let, Symbol("x"), Equal, Number(89.0), LeftBrace, Symbol("x"), RightBrace]
ast: Let1 {
    var: "x",
    value: Num(
        89.0,
    ),
    body: Var(
        "x",
    ),
}
89

Please enter an expression:
tokens: [Let, Symbol("x"), Equal, Number(15.0), LeftBrace, Number(73.0), RightBrace]
ast: Let1 {
    var: "x",
    value: Num(
        15.0,
    ),
    body: Num(
        73.0,
    ),
}
73

Please enter an expression:
tokens: [Let, Symbol("y"), Equal, Number(3.0), LeftBrace, If, Bool(true), LeftBrace, Symbol("y"), RightBrace, Else, LeftBrace, Symbol("y"), Plus, Number(9.0), RightBrace]
Parse error: Expected 'RightBrace' token

Please enter an expression:
tokens: [Let, Symbol("z"), Equal, Number(123.0), LeftBrace, Let, Symbol("z"), Equal, Number(4.0), LeftBrace, Symbol("z"), Plus, Number(2.0), RightBrace, Plus, Symbol("z"), RightBrace]
ast: Let1 {
    var: "z",
    value: Num(
        123.0,
    ),
    body: Plus {
        left: Let1 {
            var: "z",
            value: Num(
                4.0,
            ),
            body: Plus {
                left: Var(
                    "z",
                ),
                right: Num(
                    2.0,
                ),
            },
        },
        right: Var(
            "z",
        ),
    },
}
129

Please enter an expression:
tokens: [Let, Symbol("z"), Equal, Number(123.0), LeftBrace, Symbol("z"), Plus, Let, Symbol("z"), Equal, Number(4.0), LeftBrace, Symbol("z"), Plus, Number(2.0), RightBrace, RightBrace]
ast: Let1 {
    var: "z",
    value: Num(
        123.0,
    ),
    body: Plus {
        left: Var(
            "z",
        ),
        right: Let1 {
            var: "z",
            value: Num(
                4.0,
            ),
            body: Plus {
                left: Var(
                    "z",
                ),
                right: Num(
                    2.0,
                ),
            },
        },
    },
}
129

Please enter an expression:
tokens: [Let, Symbol("a"), Equal, Number(123.0), LeftBrace, Let, Symbol("a"), Equal, Number(9.0), LeftBrace, Symbol("a"), Plus, Number(-2.0), RightBrace, Plus, Let, Symbol("a"), Equal, Number(4.0), LeftBrace, Symbol("a"), Plus, Number(2.0), RightBrace, RightBrace, Plus, Number(-13.0)]
ast: Plus {
    left: Let1 {
        var: "a",
        value: Num(
            123.0,
        ),
        body: Plus {
            left: Let1 {
                var: "a",
                value: Num(
                    9.0,
                ),
                body: Plus {
                    left: Var(
                        "a",
                    ),
                    right: Num(
                        -2.0,
                    ),
                },
            },
            right: Let1 {
                var: "a",
                value: Num(
                    4.0,
                ),
                body: Plus {
                    left: Var(
                        "a",
                    ),
                    right: Num(
                        2.0,
                    ),
                },
            },
        },
    },
    right: Num(
        -13.0,
    ),
}
0

Please enter an expression:
