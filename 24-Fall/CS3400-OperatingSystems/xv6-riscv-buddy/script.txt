[Introduction]

Hello, my name is [Your Name], and today I will be presenting my implementation of a buddy allocator within the xv6 kernel. This project involves developing a memory management system that efficiently handles dynamic memory allocation and deallocation by managing memory in blocks of sizes that are powers of two. I will walk you through the key components of my implementation, explain the functionality of each part of the code, and demonstrate how the allocator operates through a series of test cases.

[Overview of the Buddy Allocator]

To begin, let’s briefly discuss what a buddy allocator is. A buddy allocator is a memory allocation system that manages memory in blocks whose sizes are powers of two. When a memory request is made, the allocator finds the smallest block size that can satisfy the request. If a larger block is available, it splits the block into two "buddies" of equal size, recursively, until the appropriate size is achieved. When freeing memory, the allocator attempts to merge buddies back into larger blocks, minimizing fragmentation and optimizing memory usage.

[Code Structure]

Our implementation is encapsulated within a single file, buddy.c. This file includes several key components:

    Data Structures and Definitions
    Initialization Function (buddyinit)
    Allocation Function (buddy_alloc)
    Deallocation Function (buddy_free)
    Utility Functions (buddy_print, buddy_test)

Let’s delve into each of these components in detail.

[Data Structures and Definitions]

At the beginning of buddy.c, we include the necessary header files that provide essential types, spinlock mechanisms, and kernel definitions.

#include "types.h"
#include "riscv.h"
#include "spinlock.h"
#include "defs.h"
#include "memlayout.h"
#include "param.h"

We define several macros to specify the minimum and maximum block sizes, the number of free lists, and unique magic numbers to identify allocated and free blocks.

#define MIN_BLOCK_SIZE 32
#define MAX_BLOCK_SIZE 4096
#define NUM_FREE_LISTS 8 // Ideally 7, but adjusted for implementation

#define ALLOC_MAGIC 0xabcdefabcdefabcdULL
#define FREE_MAGIC  0x1234567890abcdefULL

Next, we declare an external symbol end[], which marks the end of the kernel’s memory space, ensuring our allocator does not overlap with kernel memory.

extern char end[];

We then define a global buddy structure that contains a spinlock for synchronization and an array of free lists, each corresponding to a different block size.

struct {
    struct spinlock lock;
    void *freelist[NUM_FREE_LISTS];  // Array of free lists for each block size
} buddy;

Each memory block is prefixed with a header (header_t) that contains a magic number, the size of the block, and for free blocks, a pointer to the next free block.

typedef struct header_t {
    uint64 magic;  // Magic number to mark used or free block
    uint64 size;   // Total size of the block including the header
} header_t;

[Initialization Function: buddyinit]

The buddyinit function is responsible for initializing the buddy allocator. It sets up the spinlock to ensure thread safety and initializes all free lists to NULL.

void buddyinit(void) {
    initlock(&buddy.lock, "buddylock");
    for (int i = 0; i < NUM_FREE_LISTS; i++) {
        buddy.freelist[i] = 0;
    }
}

This function is called early in the kernel’s initialization process, ensuring that the allocator is ready before any memory allocation requests are made.

[Helper Functions: size_to_index and is_block_free]

Before we discuss the allocation and deallocation functions, let’s look at two helper functions that facilitate our allocator’s operations.

The size_to_index function maps a block size to its corresponding index in the free list array. It determines the appropriate free list based on the size of the memory block.

int size_to_index(uint64 size) {
    int index = 0;
    uint64 s = MIN_BLOCK_SIZE;
    while (s < size && index < NUM_FREE_LISTS - 1) {
        s <<= 1;
        index++;
    }
    return index;
}

The is_block_free function checks whether a given block is present in the free list of its size, ensuring the integrity of the allocator’s free lists.

int is_block_free(void *block_addr, uint64 size) {
    int index = size_to_index(size);
    if (index >= NUM_FREE_LISTS) {
        return 0;
    }
    void *cur = buddy.freelist[index];
    while (cur) {
        if (cur == block_addr) {
            return 1;  // Block is free
        }
        // Move to the next block in the free list
        cur = *(void **)((char *)cur + sizeof(header_t));
    }
    return 0;  // Block is not free
}

[Allocation Function: buddy_alloc]

The buddy_alloc function is the core of the allocator, handling memory allocation requests. Here’s a step-by-step breakdown of its functionality:

    Validation: The function first checks if the requested size is valid—non-zero and not exceeding the maximum usable size.

if (length == 0 || length > (MAX_BLOCK_SIZE - sizeof(header_t))) {
    return 0;  // Return zero for invalid requests
}

Synchronization: It acquires the spinlock to ensure thread safety during allocation.

acquire(&buddy.lock);

Calculate Total Size: The total size required includes the user-requested size plus the size of the header.

uint64 total_size = length + sizeof(header_t);

Determine Block Size: It identifies the smallest power-of-two block size that can accommodate the total size.

uint64 size = MIN_BLOCK_SIZE;
int index = 0;
while (size < total_size && size < MAX_BLOCK_SIZE) {
    size <<= 1;
    index++;
}

if (size > MAX_BLOCK_SIZE) {
    release(&buddy.lock);
    return 0;  // Cannot allocate blocks larger than MAX_BLOCK_SIZE
}

Find Free Block: The allocator searches the free list corresponding to the determined size.

void *block = buddy.freelist[index];
if (block) {
    // Remove block from the free list
    void **next_ptr = (void **)((char *)block + sizeof(header_t));
    buddy.freelist[index] = *next_ptr;

    // Set up the allocated block header
    header_t *hdr = (header_t *)block;
    hdr->magic = ALLOC_MAGIC;
    hdr->size = size;

    release(&buddy.lock);
    // Return a pointer to the usable space (after the header)
    return (void *)((char *)block + sizeof(header_t));
}

Split Larger Blocks: If no free block of the required size is available, the allocator searches for larger blocks to split recursively until a suitable block is obtained.

    // No free block of the required size, need to split larger blocks
    int i;
    for (i = index + 1; i < NUM_FREE_LISTS; i++) {
        if (buddy.freelist[i]) {
            break;
        }
    }

    // If no larger block is available, allocate a new one using kalloc
    if (i == NUM_FREE_LISTS) {
        void *new_block = kalloc();
        if (!new_block) {
            release(&buddy.lock);
            return 0;  // Allocation failed
        }
        // Initialize the new block as a free block of maximum size
        header_t *hdr = (header_t *)new_block;
        hdr->magic = FREE_MAGIC;
        hdr->size = MAX_BLOCK_SIZE;

        // Add the new block to the largest free list
        void **next_ptr = (void **)((char *)new_block + sizeof(header_t));
        *next_ptr = buddy.freelist[NUM_FREE_LISTS - 1];
        buddy.freelist[NUM_FREE_LISTS - 1] = new_block;
        i = NUM_FREE_LISTS - 1;  // Update index to the largest block size
    }

    // Split larger blocks until we get a block of the desired size
    while (i > index) {
        // Remove block from the current free list
        void *block_to_split = buddy.freelist[i];
        void **next_ptr = (void **)((char *)block_to_split + sizeof(header_t));
        buddy.freelist[i] = *next_ptr;

        // Split the block into two halves
        uint64 split_size = ((header_t *)block_to_split)->size / 2;

        // First half
        void *first_half = block_to_split;
        header_t *first_hdr = (header_t *)first_half;
        first_hdr->magic = FREE_MAGIC;
        first_hdr->size = split_size;

        // Second half
        void *second_half = (char *)block_to_split + split_size;
        header_t *second_hdr = (header_t *)second_half;
        second_hdr->magic = FREE_MAGIC;
        second_hdr->size = split_size;

        // Add both halves to the free list of the smaller size
        int split_index = i - 1;

        // Add first half to the free list
        void **first_next_ptr = (void **)((char *)first_half + sizeof(header_t));
        *first_next_ptr = buddy.freelist[split_index];
        buddy.freelist[split_index] = first_half;

        // Add second half to the free list
        void **second_next_ptr = (void **)((char *)second_half + sizeof(header_t));
        *second_next_ptr = buddy.freelist[split_index];
        buddy.freelist[split_index] = second_half;

        i--;
    }

    // Now allocate the block from the free list
    block = buddy.freelist[index];
    if (block == 0) {
        release(&buddy.lock);
        return 0;  // Should not happen
    }

    // Remove block from the free list
    void **next_ptr = (void **)((char *)block + sizeof(header_t));
    buddy.freelist[index] = *next_ptr;

    // Set up the allocated block header
    header_t *hdr = (header_t *)block;
    hdr->magic = ALLOC_MAGIC;
    hdr->size = size;

    release(&buddy.lock);

    // Return a pointer to the usable space
    return (void *)((char *)block + sizeof(header_t));

This comprehensive approach ensures that memory allocation is both efficient and minimizes fragmentation by intelligently managing block sizes and free lists.

[Helper Function: is_power_of_two]

The is_power_of_two function is a utility that verifies whether a given number is a power of two. This is essential for validating block sizes during deallocation.

int is_power_of_two(uint64 x) {
    return (x != 0) && ((x & (x - 1)) == 0);
}

[Deallocation Function: buddy_free]

The buddy_free function handles the deallocation of previously allocated memory blocks. Here’s a detailed explanation of its functionality:

    Handling Null Pointers: If the input pointer is NULL, the function simply returns without performing any operation.

if (ptr == 0) {
    return;  // Null pointer, do nothing
}

Synchronization: The function acquires the spinlock to ensure thread safety during the deallocation process.

acquire(&buddy.lock);

Header Retrieval and Validation: It retrieves the block's header by subtracting the size of the header from the pointer. It then validates the magic number, ensuring the block is indeed allocated, and checks that the size is a power of two within the valid range. Additionally, it verifies the block's alignment based on its size.

header_t *hdr = (header_t *)((char *)ptr - sizeof(header_t));

// Validate the magic number
if (hdr->magic != ALLOC_MAGIC) {
    release(&buddy.lock);  // Release lock before panic
    panic("buddy_free: invalid magic number");
}

uint64 size = hdr->size;

// Validate the size (must be power of two and within valid range)
if (!is_power_of_two(size) || size < MIN_BLOCK_SIZE || size > MAX_BLOCK_SIZE) {
    release(&buddy.lock);  // Release lock before panic
    panic("buddy_free: invalid block size");
}

// Validate alignment
uint64 block_addr = (uint64)hdr;
if (block_addr % size != 0) {
    release(&buddy.lock);  // Release lock before panic
    panic("buddy_free: block not properly aligned");
}

Marking the Block as Free: After successful validation, the function marks the block as free by updating its magic number.

hdr->magic = FREE_MAGIC;

Coalescing Buddies: The function attempts to merge the freed block with its buddy to form a larger block, reducing fragmentation. It calculates the buddy’s address using the XOR operation and checks if the buddy is free and of the same size. If so, it removes the buddy from the free list and merges the two blocks. This process repeats recursively until no further coalescing is possible or the maximum block size is reached.

uint64 current_size = size;
header_t *current_block = hdr;

// Coalescing loop
while (current_size < MAX_BLOCK_SIZE) {
    // Calculate the buddy's address
    uint64 buddy_addr = block_addr ^ current_size;
    header_t *buddy_hdr = (header_t *)buddy_addr;

    // Check if buddy is valid and free
    if ((uint64)buddy_hdr < (uint64)end || (uint64)buddy_hdr >= PHYSTOP) {
        // Buddy address is invalid
        break;
    }

    if (buddy_hdr->magic != FREE_MAGIC || buddy_hdr->size != current_size) {
        // Buddy is not free or not the same size
        break;
    }

    // Remove buddy from the free list
    int index = size_to_index(current_size);
    if (index >= NUM_FREE_LISTS) {
        // Invalid index
        break;
    }
    void **prev = &buddy.freelist[index];
    void *cur = *prev;
    int found = 0;

    while (cur) {
        if (cur == (void *)buddy_hdr) {
            // Remove buddy from the free list
            *prev = *(void **)((char *)cur + sizeof(header_t));
            found = 1;
            break;
        }
        prev = (void **)((char *)cur + sizeof(header_t));
        cur = *prev;
    }

    if (!found) {
        // Buddy not found in free list, cannot coalesce
        break;
    }

    // Determine the new block address (lower of the two)
    if (block_addr > buddy_addr) {
        block_addr = buddy_addr;
        current_block = buddy_hdr;
    }

    // Update the size
    current_size <<= 1;
    current_block->size = current_size;

    // Update the header
    current_block->magic = FREE_MAGIC;
}

Returning Large Blocks to kfree: If the coalesced block reaches the maximum block size, it is returned to the system using kfree.

if (current_size == MAX_BLOCK_SIZE) {
    // Return the block to kfree
    release(&buddy.lock);
    kfree((void *)current_block);
    return;
}

Inserting the Block into the Free List: Finally, the function inserts the freed (and possibly merged) block back into the appropriate free list, maintaining memory address order to facilitate efficient future allocations and coalescing.

    // Insert the block into the free list, keeping it in memory order
    int index = size_to_index(current_size);
    if (index >= NUM_FREE_LISTS) {
        // Invalid index, cannot insert
        release(&buddy.lock);
        panic("buddy_free: invalid block size during insertion");
    }
    void **prev = &buddy.freelist[index];
    void *cur = *prev;

    while (cur && cur < (void *)current_block) {
        prev = (void **)((char *)cur + sizeof(header_t));
        cur = *prev;
    }

    // Insert the block into the list
    *(void **)((char *)current_block + sizeof(header_t)) = cur;
    *prev = current_block;

    release(&buddy.lock);

This meticulous approach ensures that memory is efficiently managed, minimizing fragmentation and optimizing allocation and deallocation performance.

[Utility Functions: buddy_print and buddy_test]

To aid in debugging and verifying the allocator's functionality, we have implemented two utility functions: buddy_print and buddy_test.

buddy_print Function

The buddy_print function provides a visualization of the memory block structure. It recursively traverses the memory blocks, displaying whether each block is free, used, or split. This helps in understanding how memory is allocated and deallocated.

void buddy_print(void *ptr) {
    // Find the start address of the 4096-byte block containing ptr
    uint64 block_start_addr = (uint64)ptr & ~(MAX_BLOCK_SIZE - 1);
    void *block_start = (void *)block_start_addr;

    printf("Buddy Allocator Block Structure:\n");
    print_block(block_start, MAX_BLOCK_SIZE, 0);
}

The print_block helper function handles the recursive traversal and printing.

void print_block(void *block_addr, uint64 size, int indent) {
    if (size < MIN_BLOCK_SIZE) {
        return;
    }

    // Prepare indentation
    for (int i = 0; i < indent; i++) {
        printf("    ");
    }

    acquire(&buddy.lock);

    // Check if the block is free
    int is_free = is_block_free(block_addr, size);

    // Check if the block is allocated
    header_t *hdr = (header_t *)block_addr;
    int is_allocated = 0;
    if (hdr->magic == ALLOC_MAGIC && hdr->size == size) {
        is_allocated = 1;
    }

    // Now, check if the block has been split
    int is_split = 0;
    if (!is_free && !is_allocated && size > MIN_BLOCK_SIZE) {
        // Check if either of the two sub-blocks are allocated or free
        void *first_half = block_addr;
        void *second_half = (char *)block_addr + size / 2;

        int first_free = is_block_free(first_half, size / 2);
        int second_free = is_block_free(second_half, size / 2);

        header_t *first_hdr = (header_t *)first_half;
        header_t *second_hdr = (header_t *)second_half;

        int first_allocated = (first_hdr->magic == ALLOC_MAGIC && first_hdr->size == size / 2);
        int second_allocated = (second_hdr->magic == ALLOC_MAGIC && second_hdr->size == size / 2);

        if (first_free || second_free || first_allocated || second_allocated) {
            is_split = 1;
        }
    }

    release(&buddy.lock);

    // Print block information
    if (is_free) {
        printf("└──── free (%lu)\n", size);
    } else if (is_allocated) {
        printf("└──── used (%lu)\n", size);
    } else if (is_split) {
        // Block is split further
        printf("└──── split (%lu)\n", size);

        // Recursively print the two halves
        print_block(block_addr, size / 2, indent + 1);
        print_block((void *)((char *)block_addr + size / 2), size / 2, indent + 1);
    } else {
        // Block is neither free, allocated, nor known to be split
        printf("└──── unused (%lu)\n", size);
    }
}

buddy_test Function

The buddy_test function is designed to validate the allocator's functionality through a series of allocations and deallocations. It systematically allocates memory blocks of varying sizes, frees them, and prints the memory structure after each operation to observe the allocator's behavior.

void buddy_test(void) {
    printf("Starting buddy test\n");

    printf("\nAllocating 1024-byte block\n");
    void *e = buddy_alloc(1000);
    buddy_print(e);

    printf("\nAllocating 128-byte block\n");
    void *c = buddy_alloc(112);
    buddy_print(c);

    printf("\nAllocating 32-byte block\n");
    void *a = buddy_alloc(16);
    buddy_print(a);

    printf("\nFreeing 1024-byte block\n");
    buddy_free(e);
    buddy_print(a);

    printf("\nAllocating 128-byte block\n");
    void *b = buddy_alloc(112);
    buddy_print(b);

    printf("\nFreeing 32-byte block\n");
    buddy_free(a);
    buddy_print(b);

    printf("\nFreeing first 128-byte block\n");
    buddy_free(c);
    buddy_print(b);

    printf("\nAllocating 2048-byte block\n");
    void *d = buddy_alloc(2000);
    buddy_print(d);

    printf("\nFreeing other 128-byte block\n");
    buddy_free(b);
    buddy_print(d);

    printf("\nFreeing 2048-byte block\n");
    buddy_free(d);
}

This sequence tests the allocator’s ability to handle block splitting, allocation, freeing, and coalescing, ensuring robust memory management.

[Demonstration]

Now, let’s walk through a demonstration of the allocator in action using the buddy_test function.

    Allocating a 1024-byte Block: The allocator searches for a suitable free block, potentially splitting larger blocks to fulfill the request. After allocation, buddy_print visualizes the memory structure, showing the allocated block.

    Allocating a 128-byte Block: A smaller block is requested, prompting the allocator to split existing blocks further if necessary. The memory structure is updated accordingly.

    Allocating a 32-byte Block: The smallest block size is allocated, and the memory structure reflects this allocation.

    Freeing the 1024-byte Block: The allocator marks the block as free and attempts to coalesce it with its buddy, reducing fragmentation.

    Allocating Another 128-byte Block: The allocator efficiently reuses freed blocks, demonstrating its ability to handle repeated allocations and deallocations.

    Freeing the 32-byte and 128-byte Blocks: Further freeing operations test the allocator’s coalescing capabilities, merging adjacent free blocks into larger blocks.

    Allocating a 2048-byte Block: A larger allocation request tests the allocator’s ability to handle substantial memory requests, potentially invoking kalloc to obtain new memory if necessary.

    Final Deallocations: The allocator continues to manage memory efficiently, ensuring that all blocks are properly freed and merged as needed.

Throughout this demonstration, the buddy_print function provides a clear visualization of the memory block structure, allowing us to observe how the allocator manages memory dynamically.

[Synchronization with Spinlocks]

A critical aspect of our implementation is ensuring thread safety. We employ a spinlock mechanism to synchronize access to the allocator’s free lists, preventing race conditions in a multi-threaded environment like the xv6 kernel.

    Initialization: The spinlock is initialized in the buddyinit function.

initlock(&buddy.lock, "buddylock");

Acquiring and Releasing the Lock: Both buddy_alloc and buddy_free acquire the spinlock before modifying free lists and release it after completing their operations.

    acquire(&buddy.lock);
    // Critical section: modify free lists
    release(&buddy.lock);

This synchronization ensures that memory allocation and deallocation operations are atomic and consistent, maintaining the integrity of the allocator’s data structures.

[Handling Edge Cases and Error Conditions]

Our implementation robustly handles several edge cases and potential error conditions:

    Invalid Requests: Requests for 0 bytes or more than the maximum allowable size return NULL, preventing invalid memory operations.

if (length == 0 || length > (MAX_BLOCK_SIZE - sizeof(header_t))) {
    return 0;  // Invalid request
}

Alignment Verification: The allocator ensures that memory blocks are properly aligned based on their size, preventing alignment-related errors.

if (block_addr % size != 0) {
    panic("buddy_free: block not properly aligned");
}

Magic Number Verification: During deallocation, the allocator verifies the magic number to ensure that only valid allocated blocks are freed, preventing memory corruption.

if (hdr->magic != ALLOC_MAGIC) {
    panic("buddy_free: invalid magic number");
}

Coalescing Limits: The allocator prevents merging beyond the maximum block size, maintaining controlled memory management.

    while (current_size < MAX_BLOCK_SIZE) {
        // Coalescing logic
    }

In cases where these conditions are violated, the allocator invokes a panic, halting operations to prevent undefined behavior and maintain system stability.

[Performance Considerations]

The buddy allocator strikes a balance between speed and memory efficiency:

    Speed: Allocation and deallocation are performed rapidly due to the use of free lists and minimal fragmentation management overhead.

    Memory Efficiency: By splitting and merging blocks, the allocator minimizes wasted memory, though some internal fragmentation can still occur due to the power-of-two sizing.

Potential optimizations to enhance performance include:

    Enhanced Free List Management: Implementing more sophisticated data structures for free lists could improve allocation and deallocation speeds.

    Lazy Coalescing: Deferring the coalescing of free blocks until necessary can reduce immediate overhead during deallocation operations.

[Conclusion]

In summary, I have successfully implemented a buddy allocator within the xv6 kernel, adhering to the specified requirements. This allocator efficiently manages memory by handling allocations, deallocations, block splitting, and coalescing in a thread-safe manner. Through comprehensive testing using the buddy_test function, I have validated the allocator’s functionality, ensuring robust and reliable memory management within the kernel environment.