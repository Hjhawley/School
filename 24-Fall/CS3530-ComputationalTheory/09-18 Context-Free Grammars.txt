Context-Free Grammars (CFG)
- Definition of CFG: A context-free grammar (CFG) is a way to describe languages using rules for generating strings.
- Components of CFG:
  - V: A set of variables (also called non-terminals).
  - Σ: The alphabet (a set of terminal symbols). Important: V and Σ are disjoint (they don’t overlap).
  - R: Rules of the form A → w, where A is a variable, and w is a string of terminals and/or variables.
  - S: The start variable from which the derivation begins.
- Example CFG:  
    G=({S},{a,b},{S→aSb,S→ε},S)

Derivations
- Yields: α⇒β means α can be turned into β using a rule.
- Derives: α∗⇒β means there is a sequence of steps that turn α into β.

Context-Free Language (CFL)
- A language is *context-free* if it can be generated by a CFG. 
- Language of a grammar L(G): The set of all strings that can be derived from the start symbol.

Example CFG (G1)
- Rules:
  - A → 0A1
  - A → B
  - B → #
- Strings generated: #, 0#1, 00#11, 000#111...
- Language generated L(G1): {0ⁿ#1ⁿ ∣ n≥0}

Parse Trees
- A parse tree visually represents how a string is derived from a CFG.
  - Example: For the string "000#111", the parse tree shows the sequence of steps used to generate the string.

Example CFG for Arithmetic Expressions (G2)
- Rules:
  - EXPR → TERM ∣ EXPR+TERM
  - TERM → TERM∗FACTOR ∣ FACTOR
  - FACTOR → (EXPR) ∣ x ∣ y
- This CFG generates arithmetic expressions involving addition, multiplication, and parentheses.

CFGs are useful for describing certain types of languages, including arithmetic expressions, programming languages, and more.
The language of a CFG consists of all strings that can be derived from the grammar’s start symbol.
Parse trees help visualize how strings are generated.