OpenGL wasn't built for programmer's convenience, it was built for raw speed
Be patient



Cors Error
To fix the problem of WebGL cors errors:

Run a different web server: open a command prompt, go to directory where
index.html is, and run:
python -m http.server 8080
Then from a browser goto localhost:8080

or for a subdirectory,
http://localhost:8080/BouncingCircle/

Note: To refresh the page, you may need to hold CTRL key, then click on
the Refresh button.



Colored Triangle

/// main.js ///

const vertexShaderText = `
	precision mediump float;

	attribute vec2 vertPosition;
	attribute vec3 vertColor;
	varying vec3 fragColor;

	void main()
	{
		fragColor = vertColor;
		gl_Position = vec4(vertPosition, 0.0, 1.0);
	}
`;

const fragmentShaderText = `
	precision mediump float;

	varying vec3 fragColor;
	void main()
	{
		gl_FragColor = vec4(fragColor, 1.0);
	}
`;

main();
async function main() {
	console.log('This is working');

	const canvas = document.getElementById('glcanvas');
	const gl = canvas.getContext('webgl');

	if (!gl) {
		alert('Your browser does not support WebGL');
	}

	gl.clearColor(0.75, 0.85, 0.8, 1.0);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	//
	// Create shaders
	// 
	let shaderProgram = initShaderProgram(gl, vertexShaderText, fragmentShaderText);


	//
	// Create buffer
	//
	const triangleVertices = 
	[ // X, Y,       R, G, B
		0.0, 0.5,    1.0, 1.0, 0.0,
		-0.5, -0.5,  0.7, 0.0, 1.0,
		0.5, -0.5,   0.1, 1.0, 0.6
	];

	const triangleVertexBufferObject = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexBufferObject);
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVertices), gl.STATIC_DRAW);

	const positionAttribLocation = gl.getAttribLocation(shaderProgram, 'vertPosition');
	gl.vertexAttribPointer(
		positionAttribLocation, // Attribute location
		2, // Number of elements per attribute
		gl.FLOAT, // Type of elements
		gl.FALSE,
		5 * Float32Array.BYTES_PER_ELEMENT, // Size of an individual vertex
		0 // Offset from the beginning of a single vertex to this attribute
	);
	gl.enableVertexAttribArray(positionAttribLocation);

	const colorAttribLocation = gl.getAttribLocation(shaderProgram, 'vertColor');
	gl.vertexAttribPointer(
		colorAttribLocation, // Attribute location
		3, // Number of elements per attribute
		gl.FLOAT, // Type of elements
		gl.FALSE,
		5 * Float32Array.BYTES_PER_ELEMENT, // Size of an individual vertex
		2 * Float32Array.BYTES_PER_ELEMENT // Offset from the beginning of a single vertex to this attribute
	);
	gl.enableVertexAttribArray(colorAttribLocation);

	//
	// Main render loop
	//

	// Starts the Shader Program, which draws one frame to the screen.
	gl.drawArrays(gl.TRIANGLES, 0, 3);
};

//
// Initialize a Shader Program, which consists of a Vertex Shader and a Fragment Shader, compiled and linked.
//
function initShaderProgram(gl, vsSource, fsSource) {
    // Create and compile the two shaders.
    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);
  
    // Combine the two shaders into a shader program
    const shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
  
    // If creating the shader program failed, alert
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      alert(
        `Unable to initialize the shader program: ${gl.getProgramInfoLog(
          shaderProgram
        )}`
      );
      return null;
    }

    gl.validateProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.VALIDATE_STATUS)) {
      console.error('ERROR validating program!', gl.getProgramInfoLog(shaderProgram));
      return;
    }

	gl.useProgram(shaderProgram);
  
    return shaderProgram;
  }
  
  //
  // creates a shader of the given type with the given source code, and compiles it.
  //
  function loadShader(gl, type, source) {
    // Make an empty shader
    const shader = gl.createShader(type);
  
    // Send the source to the shader object
    gl.shaderSource(shader, source);
  
    // Compile the shader program
    gl.compileShader(shader);
  
    // If compiling the shader failed, alert
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      alert(
        `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`
      );
      gl.deleteShader(shader);
      return null;
    }
  
    return shader;
  }

/// index.html ///

<html>
	<head>
		<meta charset="utf-8" />
		<title>SimpleTriangle</title>
	</head>
	<body>
		<canvas id="glcanvas" width="800" height="600">
			Your browser does not support HTML5
		</canvas>
		<br />
		<i>Demo is above this text</i>
		<script src="main.js"></script>
	</body>
</html>
