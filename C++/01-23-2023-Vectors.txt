The process of building an application (review)

Every executable needs exactly one main() function
Compile a .cpp to get a .o, link a .o to get an executable
If the executable calls for functions from multiple different .cpp files, 
	you'll need to compile and link all of them to the executable.

Ex:

acsii_image: ascii_image.o Image.o controllers.o image_drawing.o image_output.o user_io.o // Dependency list
	g++ -o ascii_image ascii_image.o Image.o controllers.o image_drawing.o image_output.o user_io.o // Linker command

ascii_image.o: ascii_image.cpp image_menu.h Image.h // References image_menu.h so it needs to be listed as a
// dependant (but not in the compiler command) and by extension needs to include Image.h (because image_menu.h includes it)
	g++ -c ascii_image.cpp

Image.o: Image.cpp // Doesn't call any functions from image_menu.h so doesn't need it
	g++ -c Image.cpp

//	     //
// Vectors //
//	     //

A linear collection of items, analagous to a Python list
Stored in contiguous space in memory

The default size is 0
Constructor can set the size
Can be resized with a method; an expensive operation because all the data needs to be copied somewhere else
Push-back = Python append (growing the vector by one; inefficient at large scales)

x[3] = 7	Can write to and read from vector indices just like Python
a = x[3]


for i in range(len(x)):		Python

unsigned int i;
for(i=0; i<x.size(); i++){	C++

}

Different types of integers

long long			= 64-bit integer (for when you need massive numbers)
int 				= 32-bit integer (default)
short or short int 	= 16-bit integer
char 				= 8-bit integer (-128 to 127)

Signed			= the default; for when numbers may need to be negative
Unsigned			= for when only positive numbers are needed,
	and therefore offers twice as many valid integers with the same amount of memory

