Complex Fractal logic

There are an infinite amount of real numbers between 0 and 3
It's impossible to create a vector capable of holding all of these real numbers
So, we will divide the space between 0 and 3 into five equally spaced regions

    __x__|_y_
    0.00 | 0
    0.75 | 1
    1.50 | 2
    2.25 | 3
    3.00 | 4

xMin is 0, xMax is 3, n is 5
We want a formula that can take any xMin, xMax, and n

△x = (xMax - xMin) / (n-1)
x sub i = xMin + i△x

xMin and xMax are floating point numbers, n is an int
xMax must always be greater than xMin, don't forget to check for this

yMin and yMax is tricky because it's flipped upside down
Computer images start from the top and count down
yMax correlates with y0 and yMin correlates with yn-1

△y = (yMax - yMin) / (n-1)
y sub i = yMax - i△y

With this we can define left, right, bottom, and top regions of interest

x at (col) = xMin + col△x
y at (row) = yMax - row△y

////////////////////

Pseudo-random

Sequential numbers APPEAR (to the user) to not have a predictable pattern
Uses a formula and an updating seed number

void std::srand(unsigned int);
int std::rand();

Good way to ensure unique seeds is to just use the current time
unsigned int time(void*);
srand(time(0));