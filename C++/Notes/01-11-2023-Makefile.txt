// hello.cpp

#include <iostream>

int main() {
  std::cout << "Hello, world." << std::endl;
  return 0;
}

// Makefile

all: hello

hello: hello.o
	g++ -std=c++11 -o hello hello.o

hello.o: hello.cpp
	g++ -std=c++11 -c hello.cpp

////////////////////

In a Makefile, dependencies define the relationships between different parts of your project,
such as source code files, object files, and executables. Make uses these dependencies to
determine the order in which to build your project and to avoid rebuilding things unnecessarily.

Makefile

program: main.o util.o
    g++ -o program main.o util.o

main.o: main.cpp util.h
    g++ -c main.cpp

util.o: util.cpp util.h
    g++ -c util.cpp

In this example, program is the final executable that we want to build. It depends on two
object files, main.o and util.o. The main.o object file depends on the main.c source file and
the util.h header file, while the util.o object file depends on the util.c source file and the
util.h header file. When we run make program, Make looks at the dependencies and determines
that it needs to build main.o and util.o before it can build program. It then checks the
modification times of the source code files and object files to see if any of them have been
updated since the last time they were built. If any of the files have been updated, Make
rebuilds the necessary parts of the project in the correct order.