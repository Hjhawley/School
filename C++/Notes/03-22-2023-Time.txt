prime number count 

see how long it takes to count the prime numbers within a certain
range using a brute-force method. use real world seconds, not clock cycles

bool is-prime(int n){
    bool r;
    int i;
    r = true;
    for (i = 2; i < n; i++){
        if (n % i == 0){
            r = false; break;
        }
    }
    return r;
}

this is horribly inefficient btw, we're doing this to get time data

int main(int argc, char *argv[]) { // argument count and argument vector
    int max_number = 10;
    if(argc > 1){
        std::stringstream ss; // a string stream is an in-memory only stream
        ss.str(argv[1]);
        ss >> max_number;
        if(!ss.eof()){
            std::cerr << "usage: " << argv[0] << " maximum_number" << std::endl;
        }
    }
    return 0;
}

t0 = get time()
...
t1 = get time()
t1-t0

std::chrono::steady_clock::time_point t0 = std::chrono::steady_clock::now();

int count = 0;
int i;
...

std::chrono::steady_clock::time_point t0 = std::chrono::steady_clock::now();

// THREADS //

Threads refers to utilizing multiple CPU cores

std::vector<std::thread> threads;

// Create threads
threads.push_back(std::thread(count_many_primes, 2, max_number/2, std::ref(count1)));
threads.push_back(std::thread(count_many_primes, max_number/2, max_number, std::ref(count1)));

// Destroy threads
threads[0].join();
threads[1].join();

int count = count1 + count2;