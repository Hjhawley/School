int x;
std::cout << &x     // This is going to print the pointer (memory address) of x, not the value

How they're implemented:
void by_copy(int y) // create a copy of x; a different object with the same value
void by_reference(int& y) // create an alias for x; changes to y will change x
void by_pointer(int *y) // reference x via memory address; changes to y will change x

How they're called:
by_copy(x);
by_reference(x); // the argument is an int variable, used as an alias for x
by_pointer(&x); // the argument is a pointer (the memory address of x)

if Y is a class that inherits from X, then you can call these functions on Y objects.
Even though by_pointer expects an &x pointer for example, you can use a &y pointer
because Y inherits from X.
If X has an mOldData data member, and Y has a child-exclusive mNewData data member,
and we called by_copy on a Y object, it would only copy mOldData and ignore mNewData
because it's expecting an X object and it produces an X object.
If we use by_reference and we want to access Y functions and data members, we need
to account for it in the by_reference function.

dynamic_cast - there is a reference to an X (parent) object, but we want to check to see
if it's actually a Y (child) object, and if it is, do something with it.
In other words, figure this out dynamically at runtime; change behavior if it's a Y object
rather than an X object.

Y *yptr = dynamic_cast<Y*>(&y); // This will either store 0 (because Y isn't a Y object) or a real Y pointer.
if (*yptr != 0) {
    std::cout << yptr->getNewData() << std::endl;
}