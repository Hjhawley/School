Python Dictionaries: Key-Value Pairs

C++ equivalent is a Map

std::map<std::string, int>  // This map uses strings as keys and ints as values
Trying to use an int as a string will result in a syntax error

favPrime["Hayden"] = 7;    // Written just like in Python
If the key doesn't exist, it's created. If it does, its value is overwritten.

int x = favPrime["Hayden"]

Sidenote:
"a string literal in C++ uses double quotes"
'a character literal in C++ uses single quotes'



#include "functions.h"
#include <map>
#include <string>
#include <iostream>

void show_primes(const std::map<std::string, int>& primes) {
  // for key in primes:
  //    print(key, primes[key])

// ITERATORS
  std::map<std::string, int>::const_iterator p;     // Keys are strings, values are ints; const_iterator because map is const
  for(p = primes.begin(); p != primes.end(); p++) {
    std::cout << p->first << " " << p->second << std::endl; // In this case we use -> instead of . to get a data member because p is emulating a pointer
  }
}

void show_one_prime(std::map<std::string, int>& primes, const std::string& name) {
  std::cout << name << "'s favorite prime is " << primes[name] << std::endl;
}
// Indexing operator only works on non-consts, so we can't use a const map here ^

void show_one_prime_safe(std::map<std::string, int>& primes, const std::string& name) {
  if(primes.find(name) != primes.end()) {   // The iterator makes sure the key actually exists
    std::cout << name << "'s favorite prime is " << primes[name] << std::endl;
  } else {
    std::cout << name << " does not have a favorite prime." << std::endl;
  }
}