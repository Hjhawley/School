std::thread(count_many_primes, ...)
    std::ref(possible_primes)
    std::ref(count)
    std::ref(vector_lock)
    std::ref(count_lock)

////////////////////

Multiple versions of this will run simultaneously when we use threads

class PrimeHunter {
public:
    void count_many_primes();

protected:
    std::vector<int> mPossiblePrimes;
    int mCount;
    std::mutex mVectorLock;
    std::mutex mCountLock;
};

void PrimeHunter::fill_tasks(int max_number) {
    int i;
    for(i = 2; i <= max_number; i++) {
        possible_primes.push_back(i);
    }
}

void PrimeHunter::find_primes(int max) {
    std::vector<std::thread> threads;
    unsigned int max_threads = std::thread::hardware_concurrency();
    unsigned int t;

    /* create threads */
    for(t = 0; t < max_threads; t++) {
        // this->count_many_primes()
        threads.push_back(std::thread(&PrimeHunter::count_many_primes, this));
    } // This is the syntax for threads

    /* destroy threads */
    for(t = 0; t < threads.size(); t++) {
        threads[t].join();
    }
}

void PrimeHunter::count_many_primes() {
    int x;
    bool done = false;
    while(!done){
        vector_lock.lock();
        if(possible_primes.size() > 0){
            x = possible_primes.back();
            possible_primes.pop_back();
        } else {
            done = true;
        }
        count_lock.unlock();
        if(is_prime(x)){
            count_lock.lock();
            count++;
            count_lock.unlock();
        }
    }
    return;
}